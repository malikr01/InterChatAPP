// app/src/main/java/com/example/interchat/ui/screens/ChatAIScreen.kt
package com.example.interchat.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ChevronLeft
import androidx.compose.material.icons.outlined.ChevronRight
import androidx.compose.material.icons.outlined.HeadsetMic
import androidx.compose.material.icons.outlined.ThumbDown
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.launch

data class ChatMsg(val fromBot: Boolean, val text: String)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ChatAIScreen(
    onConnectLiveSupport: () -> Unit = {}
) {
    val scope = rememberCoroutineScope()

    var messages by remember {
        mutableStateOf(
            listOf(ChatMsg(true, "Merhaba! Ben FinansAI, kiÅŸisel finans asistanÄ±nÄ±z. Size nasÄ±l yardÄ±mcÄ± olabilirim?"))
        )
    }

    // ðŸ”¹ Ã‡ok sayÄ±da hazÄ±r soru (14 adet)
    val quick: List<Pair<String, String>> = listOf(
        "HarcamalarÄ±mÄ± gÃ¶ster" to "Son 30 gÃ¼nde toplam harcaman 12.450â‚º. En Ã§ok market (%32) ve ulaÅŸÄ±m (%21). Ä°stersen kategori grafiÄŸini aÃ§arÄ±m.",
        "YatÄ±rÄ±m Ã¶nerileri"   to "Risk profilin orta. Ã–neri: %60 BIST30 endeks fonu, %20 TL mevduat, %20 altÄ±n fonu.",
        "BorÃ§larÄ±m nasÄ±l?"    to "Toplam borÃ§: 27.300â‚º. Kart 7.800â‚º (son Ã¶deme 25â€™i), ihtiyaÃ§ kredisi 19.500â‚º (aylÄ±k 2.350â‚º).",
        "Birikim planÄ±"       to "Acil durum iÃ§in 45.000â‚º hedefle. AylÄ±k %20 tasarrufla ~7 ayda ulaÅŸÄ±lÄ±r.",
        "BÃ¼tÃ§e Ã¶ner"          to "50/30/20 kuralÄ±: 15.000â‚º gelir â†’ 7.500â‚º ihtiyaÃ§, 4.500â‚º istek, 3.000â‚º birikim/borÃ§.",
        "Tasarruf ipuÃ§larÄ±"   to "Market listesiyle alÄ±ÅŸveriÅŸ, nakit/Ã¶n Ã¶demeli kart, istek harcamasÄ±na haftalÄ±k limit koy.",
        "Kart analizim"       to "Bu ay kart harcamasÄ± 9.120â‚º. TemassÄ±z %28, online %41. Taksitli harcama 2.300â‚º.",
        "Fatura Ã¶zetim"       to "AylÄ±k sabit giderlerin ~3.250â‚º: elektrik 820, su 260, doÄŸalgaz 540, internet 320, gsm 180, kira 1.130.",
        "Hedef belirle"       to "6 ayda tatil iÃ§in 30.000â‚º biriktirme: aylÄ±k 5.000â‚º otomatik ayÄ±rma Ã¶neririm.",
        "AcÌ§Ä±k kalem var mÄ±?" to "Son 7 gÃ¼nde 3 bekleyen iÅŸlem var: Netflix 199â‚º, eâ€‘Devlet 40â‚º, Yemeksepeti 156â‚º.",
        "Gelir analizi"       to "Son 3 ay net gelir ortalamasÄ± 15.800â‚º. DeÄŸiÅŸkenlik %6 (stabil).",
        "Vergi hatÄ±rlat"      to "Motorlu TaÅŸÄ±tlar 2. taksit son gÃ¼n: 31 Temmuz. Ã–deme planÄ± istersen oluÅŸturayÄ±m.",
        "DÃ¶viz/altÄ±n"         to "PortfÃ¶y korunmasÄ± iÃ§in dÃ¶viz/altÄ±n toplamÄ±nÄ±n %20â€™yi geÃ§memesi Ã¶nerilir.",
        "Risk profilim"       to "KÄ±sa anketle risk profilini gÃ¼ncelleyebilirim. Son profilin: Orta (Skor 56/100)."
    )

    fun sendQuick(q: String, a: String) {
        messages = messages + ChatMsg(false, q) +
                ChatMsg(true, a + "\n\nOlmadÄ±ysa â€˜CanlÄ± desteÄŸe baÄŸlaâ€™ butonuna dokunabilirsin.")
    }

    val chipsState = rememberLazyListState()

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("ChatAI") },
                actions = {
                    TextButton(onClick = onConnectLiveSupport) {
                        Icon(Icons.Outlined.HeadsetMic, contentDescription = null)
                        Spacer(Modifier.width(6.dp))
                        Text("CanlÄ± Destek")
                    }
                }
            )
        },
        bottomBar = {
            // ðŸ”¹ Yatay kaydÄ±rÄ±labilir bar + sol/saÄŸ oklar
            Row(
                Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 8.dp, vertical = 10.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                FilledTonalIconButton(
                    onClick = {
                        scope.launch {
                            val first = chipsState.firstVisibleItemIndex
                            chipsState.animateScrollToItem((first - 3).coerceAtLeast(0))
                        }
                    }
                ) { Icon(Icons.Outlined.ChevronLeft, contentDescription = "Geri") }

                LazyRow(
                    state = chipsState,
                    modifier = Modifier
                        .weight(1f)
                        .padding(horizontal = 8.dp),
                    horizontalArrangement = Arrangement.spacedBy(8.dp),
                    contentPadding = PaddingValues(horizontal = 4.dp)
                ) {
                    items(
                        items = quick,
                        key = { it.first }
                    ) { pair ->
                        val (q, a) = pair
                        SuggestionChip(
                            onClick = { sendQuick(q, a) },
                            label = { Text(q) }
                        )
                    }
                }

                FilledTonalIconButton(
                    onClick = {
                        scope.launch {
                            val last = chipsState.firstVisibleItemIndex + 5
                            chipsState.animateScrollToItem(last.coerceAtMost(quick.lastIndex))
                        }
                    }
                ) { Icon(Icons.Outlined.ChevronRight, contentDescription = "Ä°leri") }
            }
        }
    ) { pad ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(pad)
                .padding(horizontal = 12.dp),
            verticalArrangement = Arrangement.SpaceBetween
        ) {
            LazyColumn(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(8.dp),
                contentPadding = PaddingValues(vertical = 12.dp)
            ) {
                items(messages) { m ->
                    val bg = if (m.fromBot) MaterialTheme.colorScheme.surfaceVariant
                    else MaterialTheme.colorScheme.primaryContainer
                    val align = if (m.fromBot) Alignment.Start else Alignment.End
                    Surface(
                        color = bg,
                        shape = MaterialTheme.shapes.large,
                        tonalElevation = 2.dp,
                        modifier = Modifier
                            .fillMaxWidth(0.92f)
                            .wrapContentWidth(align)
                    ) {
                        Text(m.text, modifier = Modifier.padding(12.dp))
                    }
                }
            }

            Row(
                Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp),
                horizontalArrangement = Arrangement.Center,
                verticalAlignment = Alignment.CenterVertically
            ) {
                AssistChip(
                    onClick = onConnectLiveSupport,
                    label = { Text("Cevap hoÅŸuma gitmedi, canlÄ± desteÄŸe baÄŸla") },
                    leadingIcon = { Icon(Icons.Outlined.ThumbDown, contentDescription = null) }
                )
            }
        }
    }
}
